{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161, \u0427\u0430\u043f\u0442\u044b\u043a\u043e\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0439, \u041a33422 \u00b6 \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442: \u00b6 \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430"},{"location":"#no1_33422","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161, \u0427\u0430\u043f\u0442\u044b\u043a\u043e\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0439, \u041a33422"},{"location":"#_1","text":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.","title":"\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442:"},{"location":"backend/","text":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0431\u0435\u043a\u0435\u043d\u0434\u0443 \u00b6 \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0441\u0442-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0411\u0414 \u0438 \u043e\u0431\u044a\u044f\u0432\u0438\u043c \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 class BackendHandler: def __init__(self): self.url = \"http://127.0.0.1:8000/\" # \u0431\u0430\u0437\u043e\u0432\u044b\u0439 url self.session = requests.session() # \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c def append_row(self, img_source, img_link): data = json.dumps({\"url\": img_source}) # \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 imgsource_req = self.session.post(self.url + 'add_imgsource', data=data) if imgsource_req.status_code == 200: data = json.dumps({\"url\": img_link, \"imagesource_id\": imgsource_req.json()['id']}) # \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f img_req = self.session.post(self.url + 'add_img', data=data) if img_req.status_code == 200: print('Added to backend') else: print(f\"Image failed: {img_req.content}\") else: print(f\"Image source failed: {imgsource_req.content}\") backend = BackendHandler() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u043d\u0441\u0442\u0430\u043d\u0441","title":"\u0421\u0432\u044f\u0437\u044c \u0441 \u0411\u0414"},{"location":"backend/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043b\u0430\u0441\u0441, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0441\u0442-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0411\u0414 \u0438 \u043e\u0431\u044a\u044f\u0432\u0438\u043c \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 class BackendHandler: def __init__(self): self.url = \"http://127.0.0.1:8000/\" # \u0431\u0430\u0437\u043e\u0432\u044b\u0439 url self.session = requests.session() # \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c def append_row(self, img_source, img_link): data = json.dumps({\"url\": img_source}) # \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 imgsource_req = self.session.post(self.url + 'add_imgsource', data=data) if imgsource_req.status_code == 200: data = json.dumps({\"url\": img_link, \"imagesource_id\": imgsource_req.json()['id']}) # \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f img_req = self.session.post(self.url + 'add_img', data=data) if img_req.status_code == 200: print('Added to backend') else: print(f\"Image failed: {img_req.content}\") else: print(f\"Image source failed: {imgsource_req.content}\") backend = BackendHandler() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u043d\u0441\u0442\u0430\u043d\u0441","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0431\u0435\u043a\u0435\u043d\u0434\u0443"},{"location":"connection/","text":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0434 \u00b6 from sqlmodel import SQLModel, Session, create_engine # N.B. postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...] db_url = 'postgresql://postgres:123@localhost:5432/TimeManager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"Connection"},{"location":"connection/#_1","text":"from sqlmodel import SQLModel, Session, create_engine # N.B. postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...] db_url = 'postgresql://postgres:123@localhost:5432/TimeManager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0434"},{"location":"description/","text":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b, \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0430\u043f\u0435\u0440 \u00b6 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430: from urllib.parse import unquote from os import path, makedirs, cpu_count from pygsheets.exceptions import InvalidArgumentValue, IncorrectCellLabel from typing import Tuple, List import time import requests from bs4 import BeautifulSoup from urllib3.exceptions import InsecureRequestWarning from multiprocessing import Process import concurrent.futures import asyncio from threading import Thread from typing import Tuple import sys import json \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0430\u043f\u0435\u0440/\u043f\u0430\u0440\u0441\u0435\u0440: \"\"\" \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: url = 'https://joyreactor.cc/tag/\u043a\u043e\u0442\u044d/7491' \u041f\u0430\u0440\u0441\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0441\u0442\u044b: req = requests.get(url) soup = BeautifulSoup(req.text, 'html.parser') posts = soup.findAll('a', class_='prettyPhotoLink') videos = soup.findAll('video') print(posts[0].find(\"img\").get(\"src\")) -> https://img2.joyreactor.cc/pics/post/\u043a\u043e\u0442\u044d-999.jpeg print(videos[0].find(\"source\").get(\"src\")) -> https://img2.joyreactor.cc/pics/post/webm/\u0433\u0438\u0444\u043a\u0438-\u0436\u0438\u0432\u043d\u043e\u0441\u0442\u044c-\u043a\u043e\u0442\u044d-gif-8417001.webm \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0432\u0441\u0435\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0438 \u0432\u0438\u0434\u0435\u043e \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: vid_links = [tag.find(\"source\").get(\"src\") for tag in videos] img_links = [tag.find(\"img\").get(\"src\") for tag in posts] \"\"\" class BaseScraper: _results = [] # \u0445\u0440\u0430\u043d\u0438\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \"\"\" \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043a\u0440\u0435\u0439\u043f\u0435\u0440\u0430. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043d\u0430 asyncio, multiprocessing \u0438 threading \"\"\" # \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c url \u0441 \u0442\u0435\u0433\u043e\u043c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 def __init__(self, base_url: str, start: int, end: int): self.base_url = base_url self.tag = unquote(self.base_url).split(\"/\")[-1] self.page_range = range(start, end) self.session = requests.session() if not path.exists(f\"images\"): # \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e makedirs(f\"images\") if ( # \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u043e\u0431\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 not type(self) is BaseScraper and not path.exists(f\"images/{self}\") ): makedirs(f\"images/{self}\") def extract_img_urls(self, page: int): with self.session.get(self.base_url + \"/\" + f\"{page}\", timeout=8) as req: if req.status_code == 200: soup_obj = BeautifulSoup(req.text, 'html.parser') # \u0432 \u0441\u0442\u0430\u0440\u044b\u0445 \u043f\u043e\u0441\u0442\u0430\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 image, \u0430 \u043d\u0435 prettyPhotoLink if not (posts := soup_obj.findAll(\"a\", class_=\"prettyPhotoLink\")): posts = soup_obj.findAll(\"div\", class_=\"image\") img_links = [tag.find(\"img\").get(\"src\") for tag in posts] if not img_links: print(\"Did not find anything\") return [] else: return img_links else: print(f\"Strangely, page {page} not found\") return [] def save_img(self, img: bytes): i = 0 while path.exists(f\"images/{self}/scraped_{self.tag}_{i}.jpeg\"): i += 1 try: with open(f\"images/{self}/scraped_{self.tag}_{i}.jpeg\", \"wb\") as f: # \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 jpg, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0445 jpg f.write(img) print(f\"Image saved as images/{self}/scraped_{self.tag}_{i}.jpeg\") except IOError as e: print(f\"An error occurred: {e}\") def run(self): # \u043e\u0431\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 start = time.time() self._calculate() end = time.time() # print(f\"Executed {self}, took {end - start} seconds\") BaseScraper._results.append(f\"\\nExecuted {self}, took {end - start} seconds\") def fetch(self, link): print(f\"Fetching {link}...\") def parse(self, num): print(f\"Parsing {num}...\")","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b, \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0430\u043f\u0435\u0440"},{"location":"description/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430: from urllib.parse import unquote from os import path, makedirs, cpu_count from pygsheets.exceptions import InvalidArgumentValue, IncorrectCellLabel from typing import Tuple, List import time import requests from bs4 import BeautifulSoup from urllib3.exceptions import InsecureRequestWarning from multiprocessing import Process import concurrent.futures import asyncio from threading import Thread from typing import Tuple import sys import json \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0430\u043f\u0435\u0440/\u043f\u0430\u0440\u0441\u0435\u0440: \"\"\" \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: url = 'https://joyreactor.cc/tag/\u043a\u043e\u0442\u044d/7491' \u041f\u0430\u0440\u0441\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0441\u0442\u044b: req = requests.get(url) soup = BeautifulSoup(req.text, 'html.parser') posts = soup.findAll('a', class_='prettyPhotoLink') videos = soup.findAll('video') print(posts[0].find(\"img\").get(\"src\")) -> https://img2.joyreactor.cc/pics/post/\u043a\u043e\u0442\u044d-999.jpeg print(videos[0].find(\"source\").get(\"src\")) -> https://img2.joyreactor.cc/pics/post/webm/\u0433\u0438\u0444\u043a\u0438-\u0436\u0438\u0432\u043d\u043e\u0441\u0442\u044c-\u043a\u043e\u0442\u044d-gif-8417001.webm \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u0432\u0441\u0435\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0438 \u0432\u0438\u0434\u0435\u043e \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b: vid_links = [tag.find(\"source\").get(\"src\") for tag in videos] img_links = [tag.find(\"img\").get(\"src\") for tag in posts] \"\"\" class BaseScraper: _results = [] # \u0445\u0440\u0430\u043d\u0438\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \"\"\" \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043a\u0440\u0435\u0439\u043f\u0435\u0440\u0430. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043d\u0430 asyncio, multiprocessing \u0438 threading \"\"\" # \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c url \u0441 \u0442\u0435\u0433\u043e\u043c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 def __init__(self, base_url: str, start: int, end: int): self.base_url = base_url self.tag = unquote(self.base_url).split(\"/\")[-1] self.page_range = range(start, end) self.session = requests.session() if not path.exists(f\"images\"): # \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e makedirs(f\"images\") if ( # \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u043e\u0431\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 not type(self) is BaseScraper and not path.exists(f\"images/{self}\") ): makedirs(f\"images/{self}\") def extract_img_urls(self, page: int): with self.session.get(self.base_url + \"/\" + f\"{page}\", timeout=8) as req: if req.status_code == 200: soup_obj = BeautifulSoup(req.text, 'html.parser') # \u0432 \u0441\u0442\u0430\u0440\u044b\u0445 \u043f\u043e\u0441\u0442\u0430\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 image, \u0430 \u043d\u0435 prettyPhotoLink if not (posts := soup_obj.findAll(\"a\", class_=\"prettyPhotoLink\")): posts = soup_obj.findAll(\"div\", class_=\"image\") img_links = [tag.find(\"img\").get(\"src\") for tag in posts] if not img_links: print(\"Did not find anything\") return [] else: return img_links else: print(f\"Strangely, page {page} not found\") return [] def save_img(self, img: bytes): i = 0 while path.exists(f\"images/{self}/scraped_{self.tag}_{i}.jpeg\"): i += 1 try: with open(f\"images/{self}/scraped_{self.tag}_{i}.jpeg\", \"wb\") as f: # \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 jpg, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0445 jpg f.write(img) print(f\"Image saved as images/{self}/scraped_{self.tag}_{i}.jpeg\") except IOError as e: print(f\"An error occurred: {e}\") def run(self): # \u043e\u0431\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 start = time.time() self._calculate() end = time.time() # print(f\"Executed {self}, took {end - start} seconds\") BaseScraper._results.append(f\"\\nExecuted {self}, took {end - start} seconds\") def fetch(self, link): print(f\"Fetching {link}...\") def parse(self, num): print(f\"Parsing {num}...\")","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b, \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0430\u043f\u0435\u0440"},{"location":"main/","text":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u00b6 \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0437\u0430\u0438\u0447\u043d\u043e import models from connection import * from routes import router import uvicorn app = FastAPI() app.include_router(router) @app.on_event(\"startup\") def on_startup(): init_db() @app.get(\"/\") # \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)","title":"Main"},{"location":"main/#_1","text":"\u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0437\u0430\u0438\u0447\u043d\u043e import models from connection import * from routes import router import uvicorn app = FastAPI() app.include_router(router) @app.on_event(\"startup\") def on_startup(): init_db() @app.get(\"/\") # \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430"},{"location":"models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u00b6 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0431\u0434. \u041d\u044e\u0430\u043d\u0441\u044b \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0441\u0442\u0438. \u0424\u0430\u0439\u043b \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u00b6 from sqlmodel import SQLModel, Field, Relationship, UniqueConstraint from typing import Optional, List from enum import Enum import datetime class ImportanceChart(Enum): A = \"A\" B = \"B\" C = \"C\" D = \"D\" E = \"E\" F = \"F\" class BaseUser(SQLModel): email: Optional[str] = Field(default=None, primary_key=True, unique=True) password: str \"\"\" \u043b\u0438\u043d\u043a many-to-many \u043c\u0435\u0436\u0434\u0443 Board \u0438 User, \u044e\u0437\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a \u0431\u043e\u0440\u0434\u0435 \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0440\u0434 \"\"\" class UsersBoardsLink(SQLModel, table=True): user_id: int = Field(foreign_key=\"user.id\", primary_key=True) board_id: int = Field(foreign_key=\"board.id\", primary_key=True) readonly: Optional[bool] = False class User(BaseUser, table=True): id: Optional[int] = Field(default=None, primary_key=True) boards: List[\"Board\"] = Relationship(back_populates=\"users\", link_model=UsersBoardsLink) \"\"\" \u0421 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u043e\u0440\u0434\u043e\u0439 \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0435\u0449\u0435 \u0434\u0432\u0435 \u0434\u043e\u0441\u043a\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u043d\u044b\u0445 \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 ShortBoard \u0438 LongBoard \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \"\"\" class Board(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) users: List[\"User\"] = Relationship(back_populates=\"boards\", link_model=UsersBoardsLink) class LongBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") class ShortBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") \"\"\" \u0414\u043b\u0438\u043d\u043d\u044b\u0439 \u0442\u0430\u0441\u043a \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d, \u043e\u043d \u0434\u043e\u043b\u0433\u0438\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u0432 \u0441\u0432\u043e\u0435\u0439 \u043d\u0430\u0442\u0443\u0440\u0435 \"\"\" class BaseLong(SQLModel): longboard_id: Optional[int] = Field(default=None, foreign_key=\"longboard.id\") task_importance: Optional[ImportanceChart] = None date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) deadline: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) task_title: str task_description: str class LongTasks(BaseLong, table=True): id: Optional[int] = Field(default=None, primary_key=True) \"\"\" \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \"\"\" class BasePeriodic(SQLModel): shortboard_id: Optional[int] = Field(default=None, foreign_key=\"shortboard.id\") date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) period: int task_title: str task_description: str class PeriodicTasks(BasePeriodic, table=True): id: Optional[int] = Field(default=None, primary_key=True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0441\u043a-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432 \u0432 \u0441\u0432\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u0438\u0445 (\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c readonly \u0440\u0435\u0436\u0438\u043c). \u0423 \u043e\u0434\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434, \u0430 \u043a \u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u043e\u0432. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0430\u0441\u043a\u043e\u0432: \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u0414\u043b\u0438\u043d\u043d\u044b\u0435 \u0442\u0430\u0441\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d. \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \u0423 \u0434\u043e\u0441\u043a\u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445/\u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a \u043d\u0438\u043c \u0442\u0430\u0441\u043a\u043e\u0432 \u041e\u0431\u0449\u0430\u044f ERD \u0441\u0445\u0435\u043c\u0430 \u00b6","title":"Models"},{"location":"models/#_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0431\u0434. \u041d\u044e\u0430\u043d\u0441\u044b \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0441\u0442\u0438.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"models/#_2","text":"from sqlmodel import SQLModel, Field, Relationship, UniqueConstraint from typing import Optional, List from enum import Enum import datetime class ImportanceChart(Enum): A = \"A\" B = \"B\" C = \"C\" D = \"D\" E = \"E\" F = \"F\" class BaseUser(SQLModel): email: Optional[str] = Field(default=None, primary_key=True, unique=True) password: str \"\"\" \u043b\u0438\u043d\u043a many-to-many \u043c\u0435\u0436\u0434\u0443 Board \u0438 User, \u044e\u0437\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a \u0431\u043e\u0440\u0434\u0435 \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0440\u0434 \"\"\" class UsersBoardsLink(SQLModel, table=True): user_id: int = Field(foreign_key=\"user.id\", primary_key=True) board_id: int = Field(foreign_key=\"board.id\", primary_key=True) readonly: Optional[bool] = False class User(BaseUser, table=True): id: Optional[int] = Field(default=None, primary_key=True) boards: List[\"Board\"] = Relationship(back_populates=\"users\", link_model=UsersBoardsLink) \"\"\" \u0421 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u043e\u0440\u0434\u043e\u0439 \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0435\u0449\u0435 \u0434\u0432\u0435 \u0434\u043e\u0441\u043a\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u043d\u044b\u0445 \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 ShortBoard \u0438 LongBoard \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \"\"\" class Board(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) users: List[\"User\"] = Relationship(back_populates=\"boards\", link_model=UsersBoardsLink) class LongBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") class ShortBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") \"\"\" \u0414\u043b\u0438\u043d\u043d\u044b\u0439 \u0442\u0430\u0441\u043a \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d, \u043e\u043d \u0434\u043e\u043b\u0433\u0438\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u0432 \u0441\u0432\u043e\u0435\u0439 \u043d\u0430\u0442\u0443\u0440\u0435 \"\"\" class BaseLong(SQLModel): longboard_id: Optional[int] = Field(default=None, foreign_key=\"longboard.id\") task_importance: Optional[ImportanceChart] = None date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) deadline: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) task_title: str task_description: str class LongTasks(BaseLong, table=True): id: Optional[int] = Field(default=None, primary_key=True) \"\"\" \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \"\"\" class BasePeriodic(SQLModel): shortboard_id: Optional[int] = Field(default=None, foreign_key=\"shortboard.id\") date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) period: int task_title: str task_description: str class PeriodicTasks(BasePeriodic, table=True): id: Optional[int] = Field(default=None, primary_key=True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0441\u043a-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432 \u0432 \u0441\u0432\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u0438\u0445 (\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c readonly \u0440\u0435\u0436\u0438\u043c). \u0423 \u043e\u0434\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434, \u0430 \u043a \u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u043e\u0432. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0430\u0441\u043a\u043e\u0432: \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u0414\u043b\u0438\u043d\u043d\u044b\u0435 \u0442\u0430\u0441\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d. \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \u0423 \u0434\u043e\u0441\u043a\u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445/\u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a \u043d\u0438\u043c \u0442\u0430\u0441\u043a\u043e\u0432","title":"\u0424\u0430\u0439\u043b \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"models/#erd","text":"","title":"\u041e\u0431\u0449\u0430\u044f ERD \u0441\u0445\u0435\u043c\u0430"},{"location":"parsescrape/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u00b6 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0442\u043e\u043a\u0430\u0445: class ThreadScrape(BaseScraper): def __str__(self): return \"ThreadScrape\" def _thread_save(self, link): with self.session.get(\"http:\" + link, timeout=8) as req: super().fetch(link) if req.status_code == 200: img = req.content self.save_img(img) else: print(f\"Status {req.status_code}\") def _thread_parse(self, num): img_links = self.extract_img_urls(num) with concurrent.futures.ThreadPoolExecutor(max_workers=NUMBER_OF_WORKERS + 1) as executor: # Limit to 4 worker threads for link in img_links: super().parse(num) executor.submit(self._thread_save, link) print(\"Preparing to fire append row...\") backend.append_row(self.base_url + \"/\" + f\"{num}\", link) time.sleep(1.5) def _calculate(self): with concurrent.futures.ThreadPoolExecutor(max_workers=NUMBER_OF_WORKERS) as executor: # Limit to 4 worker threads for i in self.page_range: executor.submit(self._thread_parse, i) time.sleep(5) \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043d\u0430 asyncio: class AsyncScrape(BaseScraper): def __str__(self): return \"AsyncScrape\" async def _async_save(self, link): with self.session.get(\"http:\" + link, timeout=8) as req: print(f\"Fetching {link}...\") if req.status_code == 200: img = req.content self.save_img(img) else: print(f\"Status {req.status_code}\") async def _async_parse(self, num): img_links = self.extract_img_urls(num) tasks = [] for link in img_links: # processing links task = asyncio.create_task(self._async_save(link)) await task backend.append_row(self.base_url + \"/\" + f\"{num}\", link) print(f\"Parsing {num}...\") time.sleep(1.5) async def _calculate_async(self): tasks = [] for i in self.page_range: task = asyncio.create_task(self._async_parse(i)) tasks.append(task) time.sleep(5) await asyncio.gather(*tasks) def _calculate(self): asyncio.run(self._calculate_async()) \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445: class ProcessScrape(BaseScraper): def __str__(self): return \"ProcessScrape\" def _process_save(self, link): with self.session.get(\"http:\" + link, timeout=8) as req: if req.status_code == 200: img = req.content self.save_img(img) else: print(f\"Status {req.status_code}\") def _process_parse(self, num): img_links = self.extract_img_urls(num) processes = [] for link in img_links: # processing links p = Process(target=self._process_save, args=(link,)) p.start() processes.append(p) backend.append_row(self.base_url + \"/\" + f\"{num}\", link) time.sleep(1.5) for p in processes: p.join() def _calculate(self): processes = [] for i in self.page_range: p = Process(target=self._process_parse, args=(i,)) p.start() processes.append(p) time.sleep(5) for p in processes: p.join() \u041a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u0441 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c 5 \u0441\u0435\u043a\u0443\u043d\u0434 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u043f\u0435\u0440\u0435\u0438\u043e\u0434\u043e\u043c 1.5 \u0441\u0435\u043a\u0443\u043d\u0434. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u043a\u043e\u043b\u043e 12 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0437\u0440\u0435\u043d\u0438\u0439 \u0432 DDoS-\u0435","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430"},{"location":"parsescrape/#_1","text":"\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0442\u043e\u043a\u0430\u0445: class ThreadScrape(BaseScraper): def __str__(self): return \"ThreadScrape\" def _thread_save(self, link): with self.session.get(\"http:\" + link, timeout=8) as req: super().fetch(link) if req.status_code == 200: img = req.content self.save_img(img) else: print(f\"Status {req.status_code}\") def _thread_parse(self, num): img_links = self.extract_img_urls(num) with concurrent.futures.ThreadPoolExecutor(max_workers=NUMBER_OF_WORKERS + 1) as executor: # Limit to 4 worker threads for link in img_links: super().parse(num) executor.submit(self._thread_save, link) print(\"Preparing to fire append row...\") backend.append_row(self.base_url + \"/\" + f\"{num}\", link) time.sleep(1.5) def _calculate(self): with concurrent.futures.ThreadPoolExecutor(max_workers=NUMBER_OF_WORKERS) as executor: # Limit to 4 worker threads for i in self.page_range: executor.submit(self._thread_parse, i) time.sleep(5) \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043d\u0430 asyncio: class AsyncScrape(BaseScraper): def __str__(self): return \"AsyncScrape\" async def _async_save(self, link): with self.session.get(\"http:\" + link, timeout=8) as req: print(f\"Fetching {link}...\") if req.status_code == 200: img = req.content self.save_img(img) else: print(f\"Status {req.status_code}\") async def _async_parse(self, num): img_links = self.extract_img_urls(num) tasks = [] for link in img_links: # processing links task = asyncio.create_task(self._async_save(link)) await task backend.append_row(self.base_url + \"/\" + f\"{num}\", link) print(f\"Parsing {num}...\") time.sleep(1.5) async def _calculate_async(self): tasks = [] for i in self.page_range: task = asyncio.create_task(self._async_parse(i)) tasks.append(task) time.sleep(5) await asyncio.gather(*tasks) def _calculate(self): asyncio.run(self._calculate_async()) \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445: class ProcessScrape(BaseScraper): def __str__(self): return \"ProcessScrape\" def _process_save(self, link): with self.session.get(\"http:\" + link, timeout=8) as req: if req.status_code == 200: img = req.content self.save_img(img) else: print(f\"Status {req.status_code}\") def _process_parse(self, num): img_links = self.extract_img_urls(num) processes = [] for link in img_links: # processing links p = Process(target=self._process_save, args=(link,)) p.start() processes.append(p) backend.append_row(self.base_url + \"/\" + f\"{num}\", link) time.sleep(1.5) for p in processes: p.join() def _calculate(self): processes = [] for i in self.page_range: p = Process(target=self._process_parse, args=(i,)) p.start() processes.append(p) time.sleep(5) for p in processes: p.join() \u041a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u0441 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c 5 \u0441\u0435\u043a\u0443\u043d\u0434 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u043f\u0435\u0440\u0435\u0438\u043e\u0434\u043e\u043c 1.5 \u0441\u0435\u043a\u0443\u043d\u0434. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u043a\u043e\u043b\u043e 12 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0437\u0440\u0435\u043d\u0438\u0439 \u0432 DDoS-\u0435","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430/\u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"routes/","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u00b6 \u0420\u0443\u0447\u043a\u0438, \u0437\u0430\u043f\u0440\u043e\u0441\u044b, skill-issue \u0438\u0437-\u0437\u0430 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432 sqlmodel/sqlalchemy. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f/\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u00b6 \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: from passlib.context import CryptContext import jwt \u041e\u0431\u044a\u044f\u0432\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438 \u0438\u0445 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f SECRET_KEY = \"iloveyou\" ALGORITHM = \"HS256\" router = APIRouter() pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") def hash_password(password: str): return pwd_context.hash(password) def verify_password(plain_password, hashed_password): return pwd_context.verify(plain_password, hashed_password) def create_access_token(data: dict): return jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM) def decode_token(token): try: payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM) return payload['sub'] except Exception: return None \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0440\u0443\u0447\u043a\u0438 \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u00b6 @router.get(\"/me\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u0435\u0431\u0435 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() return {\"name\": user.email} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/users\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u044e\u0437\u0435\u0440\u0430\u0445 \u0432 \u0431\u0434 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: result = session.scalars(select(User)).all() return result raise HTTPException(status_code=403, detail=\"Forbidden\") @router.patch(\"/change_password\") # \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f async def change_password(token: str, old_password: str, new_password: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() if not verify_password(old_password, user.password): raise HTTPException(status_code=401, detail=\"Invalid old password\") user.password = hash_password(new_password) session.add(user) session.commit() return {'message': 'success'} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/signup\") # \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f async def sign_up(user: User, session=Depends(get_session)): try: user.password = hash_password(user.password) session.add(user) session.commit() return {\"message\": \"success\"} except exc.IntegrityError: return HTTPException(status_code=401, detail=\"User already exists\") @router.post(\"/login\") # \u0432\u0445\u043e\u0434 async def login(user: User, session=Depends(get_session)): if not session.exec(select(User).where(User.email == user.email)).all(): raise HTTPException(status_code=401, detail=\"Invalid email\") hashed = session.execute(select(User.password).where(User.email == user.email)).first() if not verify_password(user.password, hashed.password): raise HTTPException(status_code=401, detail=\"Invalid password\") access_token = create_access_token({\"sub\": user.email, \"iat\": datetime.datetime.utcnow(), \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=24)}) return {\"access_token\": access_token} \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0440\u0434\u0430 \u00b6 @router.post(\"/create_board\") async def create_board(token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() board = Board(users=[user], readonly=False) session.add(board) session.commit() user.boards.append(board) session.refresh(board) session.refresh(user) longboard = LongBoard(board_id=board.id) shortboard = ShortBoard(board_id=board.id) session.add(longboard) session.add(shortboard) session.commit() session.refresh(longboard) session.refresh(shortboard) return {\"message\": board} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_board\") # \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u044e \u0435\u0433\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e async def delete_board(board_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u0440\u0434 delete_longboard = delete(LongBoard).where(LongBoard.board_id == board_id) delete_shortboard = delete(ShortBoard).where(ShortBoard.board_id == board_id) delete_board = delete(Board).where(Board.id == board_id) delete_link = delete(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432 cmd_longtasks = select(LongTasks.id).join(LongBoard).where(LongBoard.board_id == board_id) cmd_pertasks = select(PeriodicTasks.id).join(ShortBoard).where(ShortBoard.board_id == board_id) session.exec(delete(LongTasks).where(LongTasks.id.in_(cmd_longtasks))) session.exec(delete(PeriodicTasks).where(PeriodicTasks.id.in_(cmd_pertasks))) session.exec(delete_longboard) session.exec(delete_shortboard) session.exec(delete_link) session.exec(delete_board) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u0440\u0434\u0430 \u00b6 @router.post(\"/invite_user\") async def invite_user(board_id: int, user_email: str, token: str, readonly: bool = True, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() link = UsersBoardsLink(user_id=user_id, board_id=board_id, readonly=readonly) session.add(link) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/kick_user\") async def kick_user(board_id: int, user_email: str, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() unlink = delete(UsersBoardsLink).where(UsersBoardsLink.user_id == user_id, UsersBoardsLink.board_id == board_id) session.exec(unlink) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432 \u00b6 @router.post(\"/create_long\") async def create_long(task: LongTasks, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.longboard_id = longboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/create_periodic\") async def create_periodic(task: PeriodicTasks, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.shortboard_id = shortboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_periodic\") async def delete_periodic(task_id: int, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(PeriodicTasks).where(PeriodicTasks.shortboard_id == shortboard_id, PeriodicTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_long\") async def delete_long(task_id: int, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(LongTasks).where(LongTasks.longboard_id == longboard_id, LongTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0430\u0441\u043a\u043e\u0432 \u00b6 @router.get(\"/tasks\") async def get_tasks(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0435\u043d \u043b\u0438 \u0442\u043e\u043a\u0435\u043d user = session.scalars(select(User).where(User.email == temp)).one() # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044e\u0437\u0435\u0440\u0430 \u043f\u043e \u043f\u043e\u0447\u0442\u0435, \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0431\u043e\u0440\u0434\u0443 if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all(), session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/longtasks\") async def get_long(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) return session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/periodictasks\") async def get_periodic(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all() raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"Routes"},{"location":"routes/#_1","text":"\u0420\u0443\u0447\u043a\u0438, \u0437\u0430\u043f\u0440\u043e\u0441\u044b, skill-issue \u0438\u0437-\u0437\u0430 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432 sqlmodel/sqlalchemy.","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b"},{"location":"routes/#_2","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: from passlib.context import CryptContext import jwt \u041e\u0431\u044a\u044f\u0432\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438 \u0438\u0445 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f SECRET_KEY = \"iloveyou\" ALGORITHM = \"HS256\" router = APIRouter() pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") def hash_password(password: str): return pwd_context.hash(password) def verify_password(plain_password, hashed_password): return pwd_context.verify(plain_password, hashed_password) def create_access_token(data: dict): return jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM) def decode_token(token): try: payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM) return payload['sub'] except Exception: return None","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f/\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"routes/#_3","text":"@router.get(\"/me\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u0435\u0431\u0435 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() return {\"name\": user.email} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/users\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u044e\u0437\u0435\u0440\u0430\u0445 \u0432 \u0431\u0434 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: result = session.scalars(select(User)).all() return result raise HTTPException(status_code=403, detail=\"Forbidden\") @router.patch(\"/change_password\") # \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f async def change_password(token: str, old_password: str, new_password: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() if not verify_password(old_password, user.password): raise HTTPException(status_code=401, detail=\"Invalid old password\") user.password = hash_password(new_password) session.add(user) session.commit() return {'message': 'success'} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/signup\") # \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f async def sign_up(user: User, session=Depends(get_session)): try: user.password = hash_password(user.password) session.add(user) session.commit() return {\"message\": \"success\"} except exc.IntegrityError: return HTTPException(status_code=401, detail=\"User already exists\") @router.post(\"/login\") # \u0432\u0445\u043e\u0434 async def login(user: User, session=Depends(get_session)): if not session.exec(select(User).where(User.email == user.email)).all(): raise HTTPException(status_code=401, detail=\"Invalid email\") hashed = session.execute(select(User.password).where(User.email == user.email)).first() if not verify_password(user.password, hashed.password): raise HTTPException(status_code=401, detail=\"Invalid password\") access_token = create_access_token({\"sub\": user.email, \"iat\": datetime.datetime.utcnow(), \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=24)}) return {\"access_token\": access_token}","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0440\u0443\u0447\u043a\u0438 \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430"},{"location":"routes/#_4","text":"@router.post(\"/create_board\") async def create_board(token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() board = Board(users=[user], readonly=False) session.add(board) session.commit() user.boards.append(board) session.refresh(board) session.refresh(user) longboard = LongBoard(board_id=board.id) shortboard = ShortBoard(board_id=board.id) session.add(longboard) session.add(shortboard) session.commit() session.refresh(longboard) session.refresh(shortboard) return {\"message\": board} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_board\") # \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u044e \u0435\u0433\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e async def delete_board(board_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u0440\u0434 delete_longboard = delete(LongBoard).where(LongBoard.board_id == board_id) delete_shortboard = delete(ShortBoard).where(ShortBoard.board_id == board_id) delete_board = delete(Board).where(Board.id == board_id) delete_link = delete(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432 cmd_longtasks = select(LongTasks.id).join(LongBoard).where(LongBoard.board_id == board_id) cmd_pertasks = select(PeriodicTasks.id).join(ShortBoard).where(ShortBoard.board_id == board_id) session.exec(delete(LongTasks).where(LongTasks.id.in_(cmd_longtasks))) session.exec(delete(PeriodicTasks).where(PeriodicTasks.id.in_(cmd_pertasks))) session.exec(delete_longboard) session.exec(delete_shortboard) session.exec(delete_link) session.exec(delete_board) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0440\u0434\u0430"},{"location":"routes/#_5","text":"@router.post(\"/invite_user\") async def invite_user(board_id: int, user_email: str, token: str, readonly: bool = True, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() link = UsersBoardsLink(user_id=user_id, board_id=board_id, readonly=readonly) session.add(link) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/kick_user\") async def kick_user(board_id: int, user_email: str, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() unlink = delete(UsersBoardsLink).where(UsersBoardsLink.user_id == user_id, UsersBoardsLink.board_id == board_id) session.exec(unlink) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u0440\u0434\u0430"},{"location":"routes/#_6","text":"@router.post(\"/create_long\") async def create_long(task: LongTasks, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.longboard_id = longboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/create_periodic\") async def create_periodic(task: PeriodicTasks, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.shortboard_id = shortboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_periodic\") async def delete_periodic(task_id: int, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(PeriodicTasks).where(PeriodicTasks.shortboard_id == shortboard_id, PeriodicTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_long\") async def delete_long(task_id: int, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(LongTasks).where(LongTasks.longboard_id == longboard_id, LongTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432"},{"location":"routes/#_7","text":"@router.get(\"/tasks\") async def get_tasks(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0435\u043d \u043b\u0438 \u0442\u043e\u043a\u0435\u043d user = session.scalars(select(User).where(User.email == temp)).one() # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044e\u0437\u0435\u0440\u0430 \u043f\u043e \u043f\u043e\u0447\u0442\u0435, \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0431\u043e\u0440\u0434\u0443 if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all(), session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/longtasks\") async def get_long(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) return session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/periodictasks\") async def get_periodic(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all() raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0430\u0441\u043a\u043e\u0432"},{"location":"scrape_launch/","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0430\u0440\u0441\u0435\u0440\u0430/\u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430 \u00b6 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430: def validate_input(cmd, url: str, start: str, end: str): if start.isdigit() and end.isdigit(): start = int(start) end = int(end) else: raise TypeError(\"Can not convert str to int\") if start > end and (start < 0 or end < 0): raise ValueError(\"Invalid page range\") if url[-1] == \"/\": url = url[:-2] print(\"Trimmed the trailing '/' in the url\") return url, start, end \u0412\u0445\u043e\u0434\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430: if __name__ == \"__main__\": print(sys.argv) if len(sys.argv) == 4 and (refined_args := validate_input(*sys.argv)): # refined_args = (\"https://joyreactor.cc/tag/%D0%BA%D0%BE%D1%82%D1%8D\", 298, 300) a = ProcessScrape(*refined_args) b = AsyncScrape(*refined_args) c = ThreadScrape(*refined_args) a.run() b.run() c.run() for i in BaseScraper._results: print(i) else: print(\"Not enough parameters\") \u041f\u043e\u043b\u0435\u0437\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u0426\u041f\u0423 \u043c\u043e\u0436\u043d\u043e \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u0435: \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0435\u043c\u0441\u044f cpu_count(), \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044f\u0434\u0435\u0440 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0414\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043a\u043e\u0434\u0430 \u044f \u0440\u0435\u0448\u0438\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0443\u043b \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043f\u043e\u0440\u043e\u0432\u043d\u0443 \u043c\u0435\u0436\u0434\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0438\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0435\u0440\u0436\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f DDoS-\u0430, \u0444\u043e\u0440\u043c\u0443\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439, \u043d\u043e \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0441\u0432\u0435\u0440\u0445\u0443 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e. CPU_COUNT = cpu_count() NUMBER_OF_WORKERS = CPU_COUNT if CPU_COUNT < 4 else CPU_COUNT // 2 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043d\u0430 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u0445:","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"scrape_launch/#_1","text":"\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430: def validate_input(cmd, url: str, start: str, end: str): if start.isdigit() and end.isdigit(): start = int(start) end = int(end) else: raise TypeError(\"Can not convert str to int\") if start > end and (start < 0 or end < 0): raise ValueError(\"Invalid page range\") if url[-1] == \"/\": url = url[:-2] print(\"Trimmed the trailing '/' in the url\") return url, start, end \u0412\u0445\u043e\u0434\u043d\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430: if __name__ == \"__main__\": print(sys.argv) if len(sys.argv) == 4 and (refined_args := validate_input(*sys.argv)): # refined_args = (\"https://joyreactor.cc/tag/%D0%BA%D0%BE%D1%82%D1%8D\", 298, 300) a = ProcessScrape(*refined_args) b = AsyncScrape(*refined_args) c = ThreadScrape(*refined_args) a.run() b.run() c.run() for i in BaseScraper._results: print(i) else: print(\"Not enough parameters\") \u041f\u043e\u043b\u0435\u0437\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u0426\u041f\u0423 \u043c\u043e\u0436\u043d\u043e \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u0435: \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0435\u043c\u0441\u044f cpu_count(), \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044f\u0434\u0435\u0440 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430. \u0414\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043a\u043e\u0434\u0430 \u044f \u0440\u0435\u0448\u0438\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0443\u043b \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u043f\u043e\u0440\u043e\u0432\u043d\u0443 \u043c\u0435\u0436\u0434\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0438\u0441\u043a\u0443\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0435\u0440\u0436\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f DDoS-\u0430, \u0444\u043e\u0440\u043c\u0443\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439, \u043d\u043e \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0441\u0432\u0435\u0440\u0445\u0443 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e. CPU_COUNT = cpu_count() NUMBER_OF_WORKERS = CPU_COUNT if CPU_COUNT < 4 else CPU_COUNT // 2 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043d\u0430 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u0445:","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0430\u0440\u0441\u0435\u0440\u0430/\u0441\u043a\u0440\u0430\u043f\u0435\u0440\u0430"},{"location":"sum/","text":"\u0411\u0430\u0437\u0430 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u00b6 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: import threading import asyncio import multiprocessing from typing import Tuple, List import numpy as np import time import sys \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u043c\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 threading, asyncio \u0438 multiprocessing: class SumCalc: def __init__(self, n: int, split_num: int): \"\"\" \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0442\u0430\u0441\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u0440\u0442\u0435\u0436\u0435 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 0 \u0434\u043e n \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e \u043f\u0430\u0440\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u0441\u044f \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0435\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438: [2, 4, 6], 2 + 4 / 2 = 3, 4 + 6 / 2 = 5, [2, 3, 4, 5, 6] \"\"\" even_lst = [(num - 2, num) for num in range(2, n + 1, 2)] self.tasks = np.array_split(even_lst, split_num) self.sum = np.int64(n) def run(self): start = time.time() self._calculate() end = time.time() return f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {self}: {end - start} \u0441\u0435\u043a\u0443\u043d\u0434, \u0441\u0443\u043c\u043c\u0430: {self.sum} \u0443.\u0435.\"","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u044b, \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440"},{"location":"sum/#_1","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: import threading import asyncio import multiprocessing from typing import Tuple, List import numpy as np import time import sys \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u043c\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 threading, asyncio \u0438 multiprocessing: class SumCalc: def __init__(self, n: int, split_num: int): \"\"\" \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0442\u0430\u0441\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u0440\u0442\u0435\u0436\u0435 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 0 \u0434\u043e n \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e \u043f\u0430\u0440\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u0441\u044f \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0435\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438: [2, 4, 6], 2 + 4 / 2 = 3, 4 + 6 / 2 = 5, [2, 3, 4, 5, 6] \"\"\" even_lst = [(num - 2, num) for num in range(2, n + 1, 2)] self.tasks = np.array_split(even_lst, split_num) self.sum = np.int64(n) def run(self): start = time.time() self._calculate() end = time.time() return f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {self}: {end - start} \u0441\u0435\u043a\u0443\u043d\u0434, \u0441\u0443\u043c\u043c\u0430: {self.sum} \u0443.\u0435.\"","title":"\u0411\u0430\u0437\u0430 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430"},{"location":"sum_launch/","text":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0448\u0442\u0440\u0438\u0445\u0438 \u00b6 \u041d\u0430\u0432\u0435\u0434\u0435\u043c \u043a\u0440\u0430\u0441\u043e\u0442\u0443 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0441\u043f\u0438\u043d\u043d\u0435\u0440: def spinning_cursor(): # \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043a\u0440\u0430\u0441\u043e\u0442\u044b def cursor(): while True: for cursor in \"|/-\\\\\": yield cursor spinner = cursor() while keep_spinning: # \u043a\u0440\u0443\u0442\u0438\u0442\u044c \u043f\u043e\u043a\u0430 \u0444\u043b\u0430\u0433 \u0440\u0430\u0432\u0435\u043d True sys.stdout.write(\"\u0414\u0443\u043c\u0430\u044e \" + next(spinner)) sys.stdout.flush() time.sleep(0.1) sys.stdout.write(\"\\b\" * 7) \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430: def validate_input(cmd: str, n: str, split_num: str): if n.isdigit() and split_num.isdigit(): n = int(n) split_num = int(split_num) else: raise TypeError(\"Can not convert str to int\") if split_num > n: raise ValueError(\"Split is bigger than input\") if split_num <= 0: raise ValueError(\"Split can not be negative or zero\") return True \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0412 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u043a\u0430\u043a\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0434\u0440\u043e\u0431\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f: if __name__ == \"__main__\": # \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430 if len(sys.argv) == 3 and validate_input(*sys.argv): print(\"\u0417\u0430 \u0440\u0430\u0431\u043e\u0442\u0443\") params = tuple( map(int, sys.argv[1:]) ) # \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0432\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 n, split_num run_jobs(params) print(f\"\u0420\u0435\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430: {sum([i for i in range(params[0] + 1)])}\") else: print(\"Not enough parameters\") \u0421\u0442\u043e\u0438\u0442 \u0442\u0430\u043a\u0436\u0435 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044c, \u0447\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 \u0447\u0435\u0442\u043a\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432\u0445\u043e\u0434\u0430 \"__main__\" \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u0434\u0430 \u0438\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"sum_launch/#_1","text":"\u041d\u0430\u0432\u0435\u0434\u0435\u043c \u043a\u0440\u0430\u0441\u043e\u0442\u0443 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0441\u043f\u0438\u043d\u043d\u0435\u0440: def spinning_cursor(): # \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043a\u0440\u0430\u0441\u043e\u0442\u044b def cursor(): while True: for cursor in \"|/-\\\\\": yield cursor spinner = cursor() while keep_spinning: # \u043a\u0440\u0443\u0442\u0438\u0442\u044c \u043f\u043e\u043a\u0430 \u0444\u043b\u0430\u0433 \u0440\u0430\u0432\u0435\u043d True sys.stdout.write(\"\u0414\u0443\u043c\u0430\u044e \" + next(spinner)) sys.stdout.flush() time.sleep(0.1) sys.stdout.write(\"\\b\" * 7) \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430: def validate_input(cmd: str, n: str, split_num: str): if n.isdigit() and split_num.isdigit(): n = int(n) split_num = int(split_num) else: raise TypeError(\"Can not convert str to int\") if split_num > n: raise ValueError(\"Split is bigger than input\") if split_num <= 0: raise ValueError(\"Split can not be negative or zero\") return True \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0412 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u043a\u0430\u043a\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u0434\u0440\u043e\u0431\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f: if __name__ == \"__main__\": # \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430 if len(sys.argv) == 3 and validate_input(*sys.argv): print(\"\u0417\u0430 \u0440\u0430\u0431\u043e\u0442\u0443\") params = tuple( map(int, sys.argv[1:]) ) # \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0432\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 n, split_num run_jobs(params) print(f\"\u0420\u0435\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430: {sum([i for i in range(params[0] + 1)])}\") else: print(\"Not enough parameters\") \u0421\u0442\u043e\u0438\u0442 \u0442\u0430\u043a\u0436\u0435 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044c, \u0447\u0442\u043e \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 \u0447\u0435\u0442\u043a\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432\u0445\u043e\u0434\u0430 \"__main__\" \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u0434\u0430 \u0438\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432","title":"\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0448\u0442\u0440\u0438\u0445\u0438"},{"location":"sum_realisations/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u043e\u0432 \u00b6 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u043e\u0442\u043e\u043a\u0430\u0445: class ThreadCalc(SumCalc): # \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 def __str__(self): return \"ThreadCalc\" def _thread_target(self, chunk: List[Tuple[int, int]]): temp_sum = 0 for tup in chunk: temp_sum = np.int64( np.add(tup[0] + (tup[0] + tup[1]) // 2, temp_sum)) self.sum = np.add(temp_sum, self.sum) def _calculate(self): ths = [] for chunk in self.tasks: th = threading.Thread(target=self._thread_target, args=(chunk,)) ths.append(th) th.start() for th in ths: th.join() sys.stdout.write(\"\\b\" * 7) # \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u043d\u043d\u0435\u0440 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 asyncio: class AsyncCalc(SumCalc): # \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Asyncio def __str__(self): return \"AsyncCalc\" async def _async_target(self, chunk: List[Tuple[int, int]]): temp_sum = 0 for tup in chunk: temp_sum = np.int64( np.add(tup[0] + (tup[0] + tup[1]) // 2, temp_sum)) self.sum = np.add(temp_sum, self.sum) async def _calculate_async(self): tasks = [] for chunk in self.tasks: task = asyncio.create_task(self._async_target(chunk)) tasks.append(task) await asyncio.gather(*tasks) def _calculate(self): asyncio.run(self._calculate_async()) sys.stdout.write(\"\\b\" * 7) # \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u043d\u043d\u0435\u0440 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445: class MultiCalc(SumCalc): # \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 def __str__(self): return \"PoolCalc\" def _process(self, chunk: List[Tuple[int, int]]): temp_sum = 0 for tup in chunk: temp_sum = np.int64( np.add(tup[0] + (tup[0] + tup[1]) // 2, temp_sum)) return temp_sum def _calculate(self): pool = multiprocessing.Pool(len(self.tasks)) results = pool.map(self._process, self.tasks) pool.close() pool.join() self.sum = np.int64(np.add(self.sum, np.sum(results))) sys.stdout.write(\"\\b\" * 7) # \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u043d\u043d\u0435\u0440 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0443\u044e \u0432\u0441\u0435 \u0432\u0438\u0434\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439: def run_jobs(params: Tuple[int, int]): # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 n \u0438 split_num global keep_spinning keep_spinning = True # \u0444\u043b\u0430\u0433 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u043f\u0438\u043d\u043d\u0435\u0440\u0430 th = threading.Thread(target=spinning_cursor) th.start() print(ThreadCalc(*params).run()) print(AsyncCalc(*params).run()) print(MultiCalc(*params).run()) keep_spinning = False th.join() sys.stdout.write(\"\\b\" * 7)","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430"},{"location":"sum_realisations/#_1","text":"\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u043e\u0442\u043e\u043a\u0430\u0445: class ThreadCalc(SumCalc): # \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 def __str__(self): return \"ThreadCalc\" def _thread_target(self, chunk: List[Tuple[int, int]]): temp_sum = 0 for tup in chunk: temp_sum = np.int64( np.add(tup[0] + (tup[0] + tup[1]) // 2, temp_sum)) self.sum = np.add(temp_sum, self.sum) def _calculate(self): ths = [] for chunk in self.tasks: th = threading.Thread(target=self._thread_target, args=(chunk,)) ths.append(th) th.start() for th in ths: th.join() sys.stdout.write(\"\\b\" * 7) # \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u043d\u043d\u0435\u0440 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 asyncio: class AsyncCalc(SumCalc): # \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 Asyncio def __str__(self): return \"AsyncCalc\" async def _async_target(self, chunk: List[Tuple[int, int]]): temp_sum = 0 for tup in chunk: temp_sum = np.int64( np.add(tup[0] + (tup[0] + tup[1]) // 2, temp_sum)) self.sum = np.add(temp_sum, self.sum) async def _calculate_async(self): tasks = [] for chunk in self.tasks: task = asyncio.create_task(self._async_target(chunk)) tasks.append(task) await asyncio.gather(*tasks) def _calculate(self): asyncio.run(self._calculate_async()) sys.stdout.write(\"\\b\" * 7) # \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u043d\u043d\u0435\u0440 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445: class MultiCalc(SumCalc): # \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 def __str__(self): return \"PoolCalc\" def _process(self, chunk: List[Tuple[int, int]]): temp_sum = 0 for tup in chunk: temp_sum = np.int64( np.add(tup[0] + (tup[0] + tup[1]) // 2, temp_sum)) return temp_sum def _calculate(self): pool = multiprocessing.Pool(len(self.tasks)) results = pool.map(self._process, self.tasks) pool.close() pool.join() self.sum = np.int64(np.add(self.sum, np.sum(results))) sys.stdout.write(\"\\b\" * 7) # \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u043d\u043d\u0435\u0440 \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0443\u044e \u0432\u0441\u0435 \u0432\u0438\u0434\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439: def run_jobs(params: Tuple[int, int]): # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 n \u0438 split_num global keep_spinning keep_spinning = True # \u0444\u043b\u0430\u0433 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441\u043f\u0438\u043d\u043d\u0435\u0440\u0430 th = threading.Thread(target=spinning_cursor) th.start() print(ThreadCalc(*params).run()) print(AsyncCalc(*params).run()) print(MultiCalc(*params).run()) keep_spinning = False th.join() sys.stdout.write(\"\\b\" * 7)","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u043e\u0432"}]}