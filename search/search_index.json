{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"connection/","text":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0434 from sqlmodel import SQLModel, Session, create_engine # N.B. postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...] db_url = 'postgresql://postgres:123@localhost:5432/TimeManager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"Connection"},{"location":"connection/#_1","text":"from sqlmodel import SQLModel, Session, create_engine # N.B. postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...] db_url = 'postgresql://postgres:123@localhost:5432/TimeManager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0434"},{"location":"main/","text":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0437\u0430\u0438\u0447\u043d\u043e import models from connection import * from routes import router import uvicorn app = FastAPI() app.include_router(router) @app.on_event(\"startup\") def on_startup(): init_db() @app.get(\"/\") # \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)","title":"Main"},{"location":"main/#_1","text":"\u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0437\u0430\u0438\u0447\u043d\u043e import models from connection import * from routes import router import uvicorn app = FastAPI() app.include_router(router) @app.on_event(\"startup\") def on_startup(): init_db() @app.get(\"/\") # \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f async def root(): return {\"message\": \"Hello World\"} if __name__ == '__main__': uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430"},{"location":"models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0431\u0434. \u041d\u044e\u0430\u043d\u0441\u044b \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0441\u0442\u0438. \u0424\u0430\u0439\u043b \u043c\u043e\u0434\u0435\u043b\u0435\u0439 from sqlmodel import SQLModel, Field, Relationship, UniqueConstraint from typing import Optional, List from enum import Enum import datetime class ImportanceChart(Enum): A = \"A\" B = \"B\" C = \"C\" D = \"D\" E = \"E\" F = \"F\" class BaseUser(SQLModel): email: Optional[str] = Field(default=None, primary_key=True, unique=True) password: str \"\"\" \u043b\u0438\u043d\u043a many-to-many \u043c\u0435\u0436\u0434\u0443 Board \u0438 User, \u044e\u0437\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a \u0431\u043e\u0440\u0434\u0435 \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0440\u0434 \"\"\" class UsersBoardsLink(SQLModel, table=True): user_id: int = Field(foreign_key=\"user.id\", primary_key=True) board_id: int = Field(foreign_key=\"board.id\", primary_key=True) readonly: Optional[bool] = False class User(BaseUser, table=True): id: Optional[int] = Field(default=None, primary_key=True) boards: List[\"Board\"] = Relationship(back_populates=\"users\", link_model=UsersBoardsLink) \"\"\" \u0421 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u043e\u0440\u0434\u043e\u0439 \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0435\u0449\u0435 \u0434\u0432\u0435 \u0434\u043e\u0441\u043a\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u043d\u044b\u0445 \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 ShortBoard \u0438 LongBoard \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \"\"\" class Board(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) users: List[\"User\"] = Relationship(back_populates=\"boards\", link_model=UsersBoardsLink) class LongBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") class ShortBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") \"\"\" \u0414\u043b\u0438\u043d\u043d\u044b\u0439 \u0442\u0430\u0441\u043a \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d, \u043e\u043d \u0434\u043e\u043b\u0433\u0438\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u0432 \u0441\u0432\u043e\u0435\u0439 \u043d\u0430\u0442\u0443\u0440\u0435 \"\"\" class BaseLong(SQLModel): longboard_id: Optional[int] = Field(default=None, foreign_key=\"longboard.id\") task_importance: Optional[ImportanceChart] = None date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) deadline: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) task_title: str task_description: str class LongTasks(BaseLong, table=True): id: Optional[int] = Field(default=None, primary_key=True) \"\"\" \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \"\"\" class BasePeriodic(SQLModel): shortboard_id: Optional[int] = Field(default=None, foreign_key=\"shortboard.id\") date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) period: int task_title: str task_description: str class PeriodicTasks(BasePeriodic, table=True): id: Optional[int] = Field(default=None, primary_key=True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0441\u043a-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432 \u0432 \u0441\u0432\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u0438\u0445 (\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c readonly \u0440\u0435\u0436\u0438\u043c). \u0423 \u043e\u0434\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434, \u0430 \u043a \u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u043e\u0432. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0430\u0441\u043a\u043e\u0432: \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u0414\u043b\u0438\u043d\u043d\u044b\u0435 \u0442\u0430\u0441\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d. \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \u0423 \u0434\u043e\u0441\u043a\u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445/\u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a \u043d\u0438\u043c \u0442\u0430\u0441\u043a\u043e\u0432 \u041e\u0431\u0449\u0430\u044f ERD \u0441\u0445\u0435\u043c\u0430","title":"Models"},{"location":"models/#_1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0431\u0434. \u041d\u044e\u0430\u043d\u0441\u044b \u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0441\u0442\u0438.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"models/#_2","text":"from sqlmodel import SQLModel, Field, Relationship, UniqueConstraint from typing import Optional, List from enum import Enum import datetime class ImportanceChart(Enum): A = \"A\" B = \"B\" C = \"C\" D = \"D\" E = \"E\" F = \"F\" class BaseUser(SQLModel): email: Optional[str] = Field(default=None, primary_key=True, unique=True) password: str \"\"\" \u043b\u0438\u043d\u043a many-to-many \u043c\u0435\u0436\u0434\u0443 Board \u0438 User, \u044e\u0437\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a \u0431\u043e\u0440\u0434\u0435 \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0440\u0434 \"\"\" class UsersBoardsLink(SQLModel, table=True): user_id: int = Field(foreign_key=\"user.id\", primary_key=True) board_id: int = Field(foreign_key=\"board.id\", primary_key=True) readonly: Optional[bool] = False class User(BaseUser, table=True): id: Optional[int] = Field(default=None, primary_key=True) boards: List[\"Board\"] = Relationship(back_populates=\"users\", link_model=UsersBoardsLink) \"\"\" \u0421 \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u043e\u0440\u0434\u043e\u0439 \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0435\u0449\u0435 \u0434\u0432\u0435 \u0434\u043e\u0441\u043a\u0438 \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u043d\u044b\u0445 \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 ShortBoard \u0438 LongBoard \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \"\"\" class Board(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) users: List[\"User\"] = Relationship(back_populates=\"boards\", link_model=UsersBoardsLink) class LongBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") class ShortBoard(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) board_id: Optional[int] = Field(default=None, foreign_key=\"board.id\") \"\"\" \u0414\u043b\u0438\u043d\u043d\u044b\u0439 \u0442\u0430\u0441\u043a \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d, \u043e\u043d \u0434\u043e\u043b\u0433\u0438\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u0432 \u0441\u0432\u043e\u0435\u0439 \u043d\u0430\u0442\u0443\u0440\u0435 \"\"\" class BaseLong(SQLModel): longboard_id: Optional[int] = Field(default=None, foreign_key=\"longboard.id\") task_importance: Optional[ImportanceChart] = None date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) deadline: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) task_title: str task_description: str class LongTasks(BaseLong, table=True): id: Optional[int] = Field(default=None, primary_key=True) \"\"\" \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \"\"\" class BasePeriodic(SQLModel): shortboard_id: Optional[int] = Field(default=None, foreign_key=\"shortboard.id\") date_received: datetime.date = Field(sa_column_kwargs={\"default\": datetime.date.today()}) period: int task_title: str task_description: str class PeriodicTasks(BasePeriodic, table=True): id: Optional[int] = Field(default=None, primary_key=True) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0441\u043a-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432 \u0432 \u0441\u0432\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u0438\u0445 (\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c readonly \u0440\u0435\u0436\u0438\u043c). \u0423 \u043e\u0434\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434, \u0430 \u043a \u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0441\u043a\u0431\u043e\u0440\u0434\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u043e\u0432. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0430\u0441\u043a\u043e\u0432: \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u0414\u043b\u0438\u043d\u043d\u044b\u0435 \u0442\u0430\u0441\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0434\u0435\u0434\u043b\u0430\u0439\u043d. \u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0430\u0441\u043a \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0432 \u0434\u043d\u044f\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c, \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0442\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f date_received \u0423 \u0434\u043e\u0441\u043a\u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0445/\u0434\u043b\u0438\u043d\u043d\u044b\u0445 \u0442\u0430\u0441\u043a\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a \u043d\u0438\u043c \u0442\u0430\u0441\u043a\u043e\u0432","title":"\u0424\u0430\u0439\u043b \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"models/#erd","text":"","title":"\u041e\u0431\u0449\u0430\u044f ERD \u0441\u0445\u0435\u043c\u0430"},{"location":"routes/","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0420\u0443\u0447\u043a\u0438, \u0437\u0430\u043f\u0440\u043e\u0441\u044b, skill-issue \u0438\u0437-\u0437\u0430 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432 sqlmodel/sqlalchemy. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f/\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: from passlib.context import CryptContext import jwt \u041e\u0431\u044a\u044f\u0432\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438 \u0438\u0445 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f SECRET_KEY = \"iloveyou\" ALGORITHM = \"HS256\" router = APIRouter() pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") def hash_password(password: str): return pwd_context.hash(password) def verify_password(plain_password, hashed_password): return pwd_context.verify(plain_password, hashed_password) def create_access_token(data: dict): return jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM) def decode_token(token): try: payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM) return payload['sub'] except Exception: return None \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0440\u0443\u0447\u043a\u0438 \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 @router.get(\"/me\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u0435\u0431\u0435 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() return {\"name\": user.email} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/users\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u044e\u0437\u0435\u0440\u0430\u0445 \u0432 \u0431\u0434 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: result = session.scalars(select(User)).all() return result raise HTTPException(status_code=403, detail=\"Forbidden\") @router.patch(\"/change_password\") # \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f async def change_password(token: str, old_password: str, new_password: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() if not verify_password(old_password, user.password): raise HTTPException(status_code=401, detail=\"Invalid old password\") user.password = hash_password(new_password) session.add(user) session.commit() return {'message': 'success'} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/signup\") # \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f async def sign_up(user: User, session=Depends(get_session)): try: user.password = hash_password(user.password) session.add(user) session.commit() return {\"message\": \"success\"} except exc.IntegrityError: return HTTPException(status_code=401, detail=\"User already exists\") @router.post(\"/login\") # \u0432\u0445\u043e\u0434 async def login(user: User, session=Depends(get_session)): if not session.exec(select(User).where(User.email == user.email)).all(): raise HTTPException(status_code=401, detail=\"Invalid email\") hashed = session.execute(select(User.password).where(User.email == user.email)).first() if not verify_password(user.password, hashed.password): raise HTTPException(status_code=401, detail=\"Invalid password\") access_token = create_access_token({\"sub\": user.email, \"iat\": datetime.datetime.utcnow(), \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=24)}) return {\"access_token\": access_token} \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0440\u0434\u0430 @router.post(\"/create_board\") async def create_board(token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() board = Board(users=[user], readonly=False) session.add(board) session.commit() user.boards.append(board) session.refresh(board) session.refresh(user) longboard = LongBoard(board_id=board.id) shortboard = ShortBoard(board_id=board.id) session.add(longboard) session.add(shortboard) session.commit() session.refresh(longboard) session.refresh(shortboard) return {\"message\": board} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_board\") # \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u044e \u0435\u0433\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e async def delete_board(board_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u0440\u0434 delete_longboard = delete(LongBoard).where(LongBoard.board_id == board_id) delete_shortboard = delete(ShortBoard).where(ShortBoard.board_id == board_id) delete_board = delete(Board).where(Board.id == board_id) delete_link = delete(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432 cmd_longtasks = select(LongTasks.id).join(LongBoard).where(LongBoard.board_id == board_id) cmd_pertasks = select(PeriodicTasks.id).join(ShortBoard).where(ShortBoard.board_id == board_id) session.exec(delete(LongTasks).where(LongTasks.id.in_(cmd_longtasks))) session.exec(delete(PeriodicTasks).where(PeriodicTasks.id.in_(cmd_pertasks))) session.exec(delete_longboard) session.exec(delete_shortboard) session.exec(delete_link) session.exec(delete_board) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u0440\u0434\u0430 @router.post(\"/invite_user\") async def invite_user(board_id: int, user_email: str, token: str, readonly: bool = True, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() link = UsersBoardsLink(user_id=user_id, board_id=board_id, readonly=readonly) session.add(link) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/kick_user\") async def kick_user(board_id: int, user_email: str, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() unlink = delete(UsersBoardsLink).where(UsersBoardsLink.user_id == user_id, UsersBoardsLink.board_id == board_id) session.exec(unlink) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432 @router.post(\"/create_long\") async def create_long(task: LongTasks, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.longboard_id = longboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/create_periodic\") async def create_periodic(task: PeriodicTasks, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.shortboard_id = shortboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_periodic\") async def delete_periodic(task_id: int, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(PeriodicTasks).where(PeriodicTasks.shortboard_id == shortboard_id, PeriodicTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_long\") async def delete_long(task_id: int, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(LongTasks).where(LongTasks.longboard_id == longboard_id, LongTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0430\u0441\u043a\u043e\u0432 @router.get(\"/tasks\") async def get_tasks(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0435\u043d \u043b\u0438 \u0442\u043e\u043a\u0435\u043d user = session.scalars(select(User).where(User.email == temp)).one() # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044e\u0437\u0435\u0440\u0430 \u043f\u043e \u043f\u043e\u0447\u0442\u0435, \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0431\u043e\u0440\u0434\u0443 if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all(), session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/longtasks\") async def get_long(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) return session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/periodictasks\") async def get_periodic(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all() raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"Routes"},{"location":"routes/#_1","text":"\u0420\u0443\u0447\u043a\u0438, \u0437\u0430\u043f\u0440\u043e\u0441\u044b, skill-issue \u0438\u0437-\u0437\u0430 \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432 sqlmodel/sqlalchemy.","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b"},{"location":"routes/#_2","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: from passlib.context import CryptContext import jwt \u041e\u0431\u044a\u044f\u0432\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0430\u0440\u043e\u043b\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f jwt \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438 \u0438\u0445 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f SECRET_KEY = \"iloveyou\" ALGORITHM = \"HS256\" router = APIRouter() pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") def hash_password(password: str): return pwd_context.hash(password) def verify_password(plain_password, hashed_password): return pwd_context.verify(plain_password, hashed_password) def create_access_token(data: dict): return jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM) def decode_token(token): try: payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM) return payload['sub'] except Exception: return None","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f/\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"routes/#_3","text":"@router.get(\"/me\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u0435\u0431\u0435 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() return {\"name\": user.email} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/users\") # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0432\u0441\u0435\u0445 \u044e\u0437\u0435\u0440\u0430\u0445 \u0432 \u0431\u0434 async def get_users(token, session=Depends(get_session)): temp = decode_token(token) if temp: result = session.scalars(select(User)).all() return result raise HTTPException(status_code=403, detail=\"Forbidden\") @router.patch(\"/change_password\") # \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f async def change_password(token: str, old_password: str, new_password: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() if not verify_password(old_password, user.password): raise HTTPException(status_code=401, detail=\"Invalid old password\") user.password = hash_password(new_password) session.add(user) session.commit() return {'message': 'success'} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/signup\") # \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f async def sign_up(user: User, session=Depends(get_session)): try: user.password = hash_password(user.password) session.add(user) session.commit() return {\"message\": \"success\"} except exc.IntegrityError: return HTTPException(status_code=401, detail=\"User already exists\") @router.post(\"/login\") # \u0432\u0445\u043e\u0434 async def login(user: User, session=Depends(get_session)): if not session.exec(select(User).where(User.email == user.email)).all(): raise HTTPException(status_code=401, detail=\"Invalid email\") hashed = session.execute(select(User.password).where(User.email == user.email)).first() if not verify_password(user.password, hashed.password): raise HTTPException(status_code=401, detail=\"Invalid password\") access_token = create_access_token({\"sub\": user.email, \"iat\": datetime.datetime.utcnow(), \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=24)}) return {\"access_token\": access_token}","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0440\u0443\u0447\u043a\u0438 \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430"},{"location":"routes/#_4","text":"@router.post(\"/create_board\") async def create_board(token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() board = Board(users=[user], readonly=False) session.add(board) session.commit() user.boards.append(board) session.refresh(board) session.refresh(user) longboard = LongBoard(board_id=board.id) shortboard = ShortBoard(board_id=board.id) session.add(longboard) session.add(shortboard) session.commit() session.refresh(longboard) session.refresh(shortboard) return {\"message\": board} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_board\") # \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u044e \u0435\u0433\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e async def delete_board(board_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u0440\u0434 delete_longboard = delete(LongBoard).where(LongBoard.board_id == board_id) delete_shortboard = delete(ShortBoard).where(ShortBoard.board_id == board_id) delete_board = delete(Board).where(Board.id == board_id) delete_link = delete(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432 cmd_longtasks = select(LongTasks.id).join(LongBoard).where(LongBoard.board_id == board_id) cmd_pertasks = select(PeriodicTasks.id).join(ShortBoard).where(ShortBoard.board_id == board_id) session.exec(delete(LongTasks).where(LongTasks.id.in_(cmd_longtasks))) session.exec(delete(PeriodicTasks).where(PeriodicTasks.id.in_(cmd_pertasks))) session.exec(delete_longboard) session.exec(delete_shortboard) session.exec(delete_link) session.exec(delete_board) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0440\u0434\u0430"},{"location":"routes/#_5","text":"@router.post(\"/invite_user\") async def invite_user(board_id: int, user_email: str, token: str, readonly: bool = True, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() link = UsersBoardsLink(user_id=user_id, board_id=board_id, readonly=readonly) session.add(link) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/kick_user\") async def kick_user(board_id: int, user_email: str, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): user_id = session.scalars(select(User.id).where(User.email == user_email)).one() unlink = delete(UsersBoardsLink).where(UsersBoardsLink.user_id == user_id, UsersBoardsLink.board_id == board_id) session.exec(unlink) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u043e\u0440\u0434\u0430"},{"location":"routes/#_6","text":"@router.post(\"/create_long\") async def create_long(task: LongTasks, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.longboard_id = longboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.post(\"/create_periodic\") async def create_periodic(task: PeriodicTasks, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): task.shortboard_id = shortboard_id session.add(task) session.commit() session.refresh(task) return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_periodic\") async def delete_periodic(task_id: int, shortboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(ShortBoard).join(UsersBoardsLink).where(ShortBoard.id == shortboard_id, UsersBoardsLink.user_id == user.id, ShortBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(PeriodicTasks).where(PeriodicTasks.shortboard_id == shortboard_id, PeriodicTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\") @router.delete(\"/delete_long\") async def delete_long(task_id: int, longboard_id: int, token: str, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(Board).join(LongBoard).join(UsersBoardsLink).where(LongBoard.id == longboard_id, UsersBoardsLink.user_id == user.id, LongBoard.board_id == Board.id, UsersBoardsLink.readonly == False) if session.scalars(cmd).all(): delete_task = delete(LongTasks).where(LongTasks.longboard_id == longboard_id, LongTasks.id == task_id) session.exec(delete_task) session.commit() return {\"message\": \"success\"} raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u0441\u043a\u043e\u0432"},{"location":"routes/#_7","text":"@router.get(\"/tasks\") async def get_tasks(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0435\u043d \u043b\u0438 \u0442\u043e\u043a\u0435\u043d user = session.scalars(select(User).where(User.email == temp)).one() # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044e\u0437\u0435\u0440\u0430 \u043f\u043e \u043f\u043e\u0447\u0442\u0435, \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u0431\u043e\u0440\u0434\u0443 if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all(), session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/longtasks\") async def get_long(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_long = select(LongTasks).join(LongBoard).join(Board).filter(LongBoard.board_id == board_id) return session.scalars(cmd_long).all() raise HTTPException(status_code=403, detail=\"Forbidden\") @router.get(\"/tasks/periodictasks\") async def get_periodic(token, board_id: int = None, session=Depends(get_session)): temp = decode_token(token) if temp: user = session.scalars(select(User).where(User.email == temp)).one() cmd = select(UsersBoardsLink).where(UsersBoardsLink.board_id == board_id, UsersBoardsLink.user_id == user.id) if session.scalars(cmd).all(): cmd_per = select(PeriodicTasks).join(ShortBoard).join(Board).filter(ShortBoard.board_id == board_id) return session.scalars(cmd_per).all() raise HTTPException(status_code=403, detail=\"Forbidden\")","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0442\u0430\u0441\u043a\u043e\u0432"}]}